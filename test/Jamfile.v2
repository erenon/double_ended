# (C) Copyright Benedek Thaler 2015-2016.
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

using testing ;
import notfile ;

path-constant BUILD_DIR : ../bin/test ;
path-constant TOP : ../ ;

project boost/double_ended
  : build-dir $(BUILD_DIR)
  : requirements
    <include>$(TOP)/include
  ;

local toolset =
  <toolset>gcc:<cxxflags>-Wall
  <toolset>gcc:<cxxflags>-Wextra
  <toolset>gcc:<cxxflags>-Werror
  <toolset>gcc:<cxxflags>-std=c++11
  <toolset>gcc:<cxxflags>-isystem=$(BOOST_ROOT)

  <toolset>clang:<cxxflags>-Wall
  <toolset>clang:<cxxflags>-Wextra
  <toolset>clang:<cxxflags>-Werror
  <toolset>clang:<cxxflags>-std=c++11
  <toolset>clang:<cxxflags>-I$(BOOST_ROOT)
  <toolset>clang:<cxxflags>--system-header-prefix=boost/
  <toolset>clang:<cxxflags>--no-system-header-prefix=boost/double_ended

  <toolset>msvc:<include>$(BOOST_ROOT)
  <toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS
  <toolset>msvc:<cxxflags>/bigobj

  <debug-symbols>on
;

variant sanitize :
  <optimization>off
  <debug-symbols>on
  <cxxflags>-fsanitize=address
;

variant coverage :
  <optimization>off
  <debug-symbols>on
  <cxxflags>--coverage
  <linkflags>--coverage
;

lib boost_serialization : : <search>$(BOOST_ROOT)/stage/lib ;

# lib asan must come first on the link line among the libraries,
# specify every other library as dependency to force
# Boost.Build to put it there.
lib asan : : <use>boost_serialization <name>asan ;

# Link asan library if variant=sanitize
#
# Specifying lib explicitly in variant requirements
# results in recursive target definition, because
# the build system wants to build the defined library
# and link it to itself.
#
# We also can't just specify -lasan as a link flag,
# because that would appear on the command line
# later than other libraries, and asan must come first.
rule link_asan ( properties * )
{
  local result ;
  if <variant>sanitize in $(properties)
  {
      result += <library>asan ;
  }
  return $(result) ;
}

rule test_all
{
   local rules = ;

   local sources = [ glob $(TOP)/test/*.cpp ] ;
   sources      += [ glob $(TOP)/example/*.cpp ] ;

   for local source in $(sources)
   {
      local libs ;

      if [ MATCH (.*serialize.+) : $(source) ]
      {
        libs += boost_serialization ;
      }

      rules += [ run $(source) $(libs)
      :  # args passed to tests
      :  # input files
      :  # requirements
         $(toolset)
         <conditional>@link_asan
      ] ;
   }

   return $(rules) ;
}

alias double_ended_test : [ test_all ] ;

notfile lcov : @lcov ;
explicit lcov ;

# Generate Code Coverage report
#
# Add --rc lcov_branch_coverage=1 to lcov and --branch-coverage to genhtml to get branch coverage.
# To make the --no-external lcov switch work, move this file one dir up and adjust $TOP
actions lcov
{
  lcov -c -d "$(BUILD_DIR)" -b "$(TOP)" -o "$(BUILD_DIR)/double_ended-coverage.info";
  genhtml "$(BUILD_DIR)/double_ended-coverage.info" -o "$(BUILD_DIR)/coverage-report";
}

rule bench_compile
{
  local sources = [ glob $(TOP)/benchmark/*.cpp ] ;
  local rules = [ link $(sources)
  :  # requirements
     $(toolset)
     <conditional>@link_asan
     <threading>multi
  ] ;

  return $(rules) ;
}

alias bench : [ bench_compile ] ;
explicit bench ;
