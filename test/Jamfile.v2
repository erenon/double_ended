# Copyright 2015 Benedek Thaler
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

using testing ;

project boost/double_ended
  : build-dir /var/tmp/double_ended/build/test
  : requirements
    <include>../include
  ;

local toolset =
  <toolset>gcc:<cxxflags>-Wextra
  <toolset>gcc:<cxxflags>-Werror
  <toolset>gcc:<cxxflags>-std=c++11
  <toolset>gcc:<cxxflags>-isystem=$(BOOST_ROOT)

  <toolset>clang:<cxxflags>-Wextra
  <toolset>clang:<cxxflags>-Werror
  <toolset>clang:<cxxflags>-std=c++11
  <toolset>clang:<cxxflags>-I$(BOOST_ROOT)
  <toolset>clang:<cxxflags>--system-header-prefix=boost/
  <toolset>clang:<cxxflags>--no-system-header-prefix=boost/double_ended
;

lib boost_serialization : : <search>$(BOOST_ROOT)/stage/lib ;

local libs = ;

if [ modules.peek : SANITIZE_DOUBLE_ENDED ]
{
  ECHO "Sanitize double_ended" ;

  toolset +=
    <toolset>gcc:<cxxflags>-fsanitize=address
    <toolset>clang:<cxxflags>-fsanitize=address
  ;

  lib asan : : <use>boost_serialization <name>asan ;
  libs += asan ;
}

rule test_all
{
   local rules = ;

   local sources = [ glob *.cpp ] ;
   sources      += [ glob ../example/*.cpp ] ;

   for local source in $(sources)
   {
      local actual_libs = $(libs) ;

      if [ MATCH (.*serialize.+) : $(source) ]
      {
        actual_libs += boost_serialization ;
      }

      rules += [ run $(source) $(actual_libs)
      :  # args passed to tests
      :  # input files
      :  # other properties
         $(toolset)
      ] ;
   }

   return $(rules) ;
}

test-suite double_ended_test : [ test_all ] ;
